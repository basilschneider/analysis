#!/usr/bin/env bash

# Wrapper script to create n-tuples and friend trees from MiniAOD

set -e -o pipefail

dir=~/analysis/datasets/
out=output
eos=root://eoscms.cern.ch//eos/cms/store/cmst3/group/susy/alobanov/MC/CMGtuples/MiniAODv2/Spring15_CBID/Skim_HT350_LooseLep/
tree=treeProducerSusySingleLepton
condor=false
verbose=false
debug=false
skip=(Friends)

usage(){
    echo "Usage: $0 [option]"
    echo "where [option] can be"
    echo "-h                 Show this help"
    echo "-o output          Set name of output directory (default: $out)"
    echo "-d dir             Path to output directory (default: $dir)"
    echo "-e eos             Path to eos directory (default: $eos)"
    echo "-t                 Path to tree in eos directory (default: $tree)"
    echo "-c                 Run on condor (default: $condor)"
    echo "-v                 Be verbose"
    echo "--debug            Debug messages (default: $debug)"
}

parseOptions(){

    # Check for flags
    OPT=$(getopt \
        --options hco:d:e:v \
        --long debug \
        --name "$0" \
        -- "$@"
    )

    eval set -- "${OPT}"

    while true; do
        case "${1}" in
            -h) usage
                exit 0;;
            -d) dir="${2}"
                shift 2;;
            -o) out="${2}"
                shift 2;;
            -e) eos="${2}"
                shift 2;;
            -t) tree="${2}"
                shift 2;;
            -c) condor=true
                shift 1;;
            -v) verbose=true
                shift 1;;
            --debug) debug=true
                shift 1;;
            --) shift
                break;;
        esac
    done

    # Check for positional arguments
    if [ $# -ne 0 ]; then
        usage
        exit 1
    fi
}

parseEos(){
    # Get site from eos variable, e.g.
    # root://eoscms.cern.ch//eos/cms/store/ -->
    # root://eoscms.cern.ch/
    eosSite="${eos%\/\/*}"/
    # Get path from eos, e.g.
    # root://eoscms.cern.ch//eos/cms/store/ -->
    # /eos/cms/store
    eosPath=/"${eos##*\/\/}"
}

produceFriends(){

    # Commands to be executed later
    cmd=()

    # Get list of trees
    cmd+=('echo -n "Get datasets from eos... "')
    cmd+=('datasets=$(xrdfs $eosSite ls $eosPath)')
    cmd+=('echo Done.')

    if [ "$verbose" = true ]; then
        cmd+=('echo Datasets found on eos:')
        cmd+=('sed "s/ /\n/g" <<< ${datasets}')
    fi

    # Create temporary directory to download samples from eos
    tmp=${dir}/tmp
    cmd+=('mkdir -p ${tmp}')

    # Make output absolute, since we are changing directory later
    if [ "${out:0:1}" != "/" ]; then
        cmd+=('out=${PWD}/${out}')
    fi

    if [ "${condor}" == true ]; then
        cmdCondor
    else
        cmdLocal
    fi
}

# When running on condor
cmdCondor(){
    # File with info for condor
    f_condor=${out}/condor_info

    # Loop over datasets to get information
    cmd+=('for dataset in ${datasets}; do')

    # Get name of sample
    cmdadd 'sample=${dataset##*/};'
    cmdadd 'echo Get information for ${sample}.;'

    # Check sample against list of samples that are skipped by default
    cmdadd 'if [[ "${skip[@]}" =~ "${sample}" ]]; then '
    cmdadd 'echo Sample is skipped by default.; continue; fi;'

    # If sample is already in condor file, skip
    cmdadd 'if grep -q ${sample} ${f_condor} 2>/dev/null; then '
    cmdadd 'echo Sample already in condor file.; continue; fi;'

    downloadSample

    # Get number of entries in tree
    cmdadd 'echo -n "Get number of events... ";'
    cmdadd 'entries=$(python -c "from ToolboxHelper import \
        get_tree_entries; print \
        get_tree_entries(\"${tmp}/${sample}/${tree}/tree.root\", \"tree\")");'
    cmdadd 'echo ${entries};'

    # Write info into file for condor processing
    cmdadd 'mkdir -p ${out};'
    cmdadd 'echo ${eosSite} ${eosPath} ${sample} ${entries} >> ${f_condor};'

    # Clean up
    cmdadd 'rm -rf ${tmp}/${sample};'

    # End loop
    cmdadd 'done'

    # Change output files of condor
    cmd+=('sed -i "s/^Output.*/Output = ')
    cmdadd '${out//\//\\/}\/friend_production_\$(Cluster).stdout/" condor;'
    cmd+=('sed -i "s/^Error.*/Error = ')
    cmdadd '${out//\//\\/}\/friend_production_\$(Cluster).stderr/" condor;'
    cmd+=('sed -i "s/^Log.*/Log = ')
    cmdadd '${out//\//\\/}\/friend_production_\$(Cluster).condor/" condor;'

    # Loop over condor file to submit jobs
    cmd+=('while read line; do')

    # Change condor submission script
    cmdadd 'sed -i "s/^Arguments.*/Arguments = ${line//\//\\/}/" condor;'

    # Submit job
    cmdadd 'condor_submit condor;'

    ####### BREAK
    cmdadd 'break;'

    # End loop
    cmdadd 'done < ${f_condor}'
}

# When running locally
cmdLocal(){

    # Loop over datasets
    cmd+=('for dataset in ${datasets}; do')

    # Get name of sample
    cmdadd 'sample=${dataset##*/};'
    cmdadd 'echo Process dataset ${sample}.;'

    downloadSample

    # Subshell to make friend trees
    cmdadd '('
    cmdadd 'cd ${CMSSW_BASE}/src/CMGTools/SUSYAnalysis/macros/;'
    cmdadd 'echo -n "Produce friend tree... ";'
    cmdadd 'python prepareEventVariablesFriendTree.py -N 10000 -j 24 '
    cmdadd '${tmp} ${out}'
    pipeout
    cmdadd 'echo Done.;'
    cmdadd ');'

    # Clean up
    cmdadd 'rm -rf ${tmp}/${sample};'

    # End loop
    cmdadd 'done'
}

# Append to last cmd entry
cmdadd(){
    cmd[${#cmd[@]}-1]+=" $1"
}

# If verbosity is disable, pipe output to /dev/null
pipeout(){
    if [ "$verbose" = false ]; then
        cmdadd ' >/dev/null;'
    else
        cmdadd ';'
    fi
}

# Download sample from eos
downloadSample(){
    # Build directory structure that can be read by idiotic python script
    cmdadd 'mkdir -p ${tmp}/${sample}/${tree};'

    # Subshell to download sample
    cmdadd '('
    cmdadd 'cd ${tmp}/${sample}/${tree};'
    cmdadd 'echo Download sample from eos... ;'
    cmdadd 'xrdcp -f ${eosSite}${dataset}/${tree}/tree.root .'
    pipeout
    cmdadd ');'
}

# Invoke cmd command
invokeCmd(){
    # Invoke command(s) in subshell
    (
        for c in "${cmd[@]}"; do
            if [ "$debug" == "true" ]; then
                echo "$c"
            fi
            eval "$c"
        done
    )
}

main(){
    parseOptions "$@"
    parseEos
    produceFriends
    invokeCmd
}

main "$@"
